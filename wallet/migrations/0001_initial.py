# Generated by Django 4.2.18 on 2025-01-31 15:42

from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MnemonicBackup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("device_id", models.CharField(max_length=100, verbose_name="设备ID")),
                ("encrypted_mnemonic", models.TextField(verbose_name="加密助记词")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
            ],
            options={
                "verbose_name": "助记词备份",
                "verbose_name_plural": "助记词备份",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NFTCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chain", models.CharField(max_length=20, verbose_name="区块链")),
                (
                    "contract_address",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="合约地址"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="合集名称")),
                ("symbol", models.CharField(max_length=20, verbose_name="合集符号")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="描述"),
                ),
                (
                    "logo",
                    models.URLField(blank=True, null=True, verbose_name="Logo URL"),
                ),
                (
                    "banner",
                    models.URLField(blank=True, null=True, verbose_name="Banner URL"),
                ),
                (
                    "website",
                    models.URLField(blank=True, null=True, verbose_name="官网"),
                ),
                (
                    "discord",
                    models.URLField(blank=True, null=True, verbose_name="Discord"),
                ),
                (
                    "twitter",
                    models.URLField(blank=True, null=True, verbose_name="Twitter"),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="是否已验证"),
                ),
                (
                    "is_recommended",
                    models.BooleanField(default=False, verbose_name="是否推荐"),
                ),
                (
                    "floor_price",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="地板价",
                    ),
                ),
                (
                    "volume_24h",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="24h交易量",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "NFT合集",
                "verbose_name_plural": "NFT合集",
                "ordering": ["-is_recommended", "-floor_price"],
                "unique_together": {("chain", "contract_address")},
            },
        ),
        migrations.CreateModel(
            name="PaymentPassword",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="设备ID"
                    ),
                ),
                (
                    "encrypted_password",
                    models.CharField(max_length=255, verbose_name="加密的支付密码"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "支付密码",
                "verbose_name_plural": "支付密码",
            },
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chain", models.CharField(max_length=10, verbose_name="链")),
                ("name", models.CharField(max_length=100, verbose_name="名称")),
                ("symbol", models.CharField(max_length=20, verbose_name="符号")),
                ("address", models.CharField(max_length=100, verbose_name="合约地址")),
                ("decimals", models.IntegerField(default=18, verbose_name="小数位数")),
                (
                    "logo",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Logo URL"
                    ),
                ),
                ("coin_id", models.CharField(max_length=100, verbose_name="币种ID")),
                (
                    "rank",
                    models.IntegerField(blank=True, null=True, verbose_name="排名"),
                ),
                ("is_new", models.BooleanField(default=False, verbose_name="是否新币")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="是否活跃"),
                ),
                (
                    "type",
                    models.CharField(
                        default="token", max_length=20, verbose_name="类型"
                    ),
                ),
                (
                    "contract_type",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="合约类型"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="描述"),
                ),
                (
                    "tags",
                    models.JSONField(blank=True, default=list, verbose_name="标签"),
                ),
                (
                    "team",
                    models.JSONField(blank=True, default=list, verbose_name="团队"),
                ),
                (
                    "open_source",
                    models.BooleanField(default=True, verbose_name="是否开源"),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="项目开始时间"
                    ),
                ),
                (
                    "development_status",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="开发状态"
                    ),
                ),
                (
                    "hardware_wallet",
                    models.BooleanField(default=False, verbose_name="是否支持硬件钱包"),
                ),
                (
                    "proof_type",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="共识机制"
                    ),
                ),
                (
                    "org_structure",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="组织结构"
                    ),
                ),
                (
                    "hash_algorithm",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="哈希算法"
                    ),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="官网"
                    ),
                ),
                (
                    "explorer",
                    models.JSONField(
                        blank=True, default=list, verbose_name="区块浏览器"
                    ),
                ),
                (
                    "reddit",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Reddit链接"
                    ),
                ),
                (
                    "source_code",
                    models.JSONField(blank=True, default=list, verbose_name="源代码"),
                ),
                (
                    "technical_doc",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="技术文档"
                    ),
                ),
                (
                    "twitter",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Twitter"
                    ),
                ),
                (
                    "telegram",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Telegram"
                    ),
                ),
                (
                    "links_extended",
                    models.JSONField(blank=True, default=list, verbose_name="扩展链接"),
                ),
                (
                    "whitepaper_link",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="白皮书链接"
                    ),
                ),
                (
                    "whitepaper_thumbnail",
                    models.URLField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="白皮书缩略图",
                    ),
                ),
                (
                    "first_data_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="首次数据时间"
                    ),
                ),
                (
                    "last_data_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="最后数据时间"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "代币",
                "verbose_name_plural": "代币",
                "unique_together": {("coin_id", "chain", "address")},
            },
        ),
        migrations.CreateModel(
            name="Wallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("device_id", models.CharField(max_length=100, verbose_name="设备ID")),
                ("name", models.CharField(max_length=100, verbose_name="钱包名称")),
                ("chain", models.CharField(max_length=20, verbose_name="区块链")),
                ("address", models.CharField(max_length=100, verbose_name="地址")),
                (
                    "encrypted_private_key",
                    models.TextField(blank=True, null=True, verbose_name="加密私钥"),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="wallet_avatars/",
                        verbose_name="头像",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="是否激活"),
                ),
                (
                    "is_watch_only",
                    models.BooleanField(default=False, verbose_name="是否观察者钱包"),
                ),
                (
                    "is_imported",
                    models.BooleanField(default=False, verbose_name="是否导入的钱包"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "钱包",
                "verbose_name_plural": "钱包",
                "ordering": ["-created_at"],
                "unique_together": {("device_id", "chain", "address")},
            },
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chain", models.CharField(max_length=20, verbose_name="区块链")),
                ("tx_hash", models.CharField(max_length=100, verbose_name="交易哈希")),
                (
                    "tx_type",
                    models.CharField(
                        choices=[
                            ("TRANSFER", "转账"),
                            ("APPROVE", "授权"),
                            ("SWAP", "兑换"),
                            ("MINT", "铸造"),
                            ("BURN", "销毁"),
                            ("OTHER", "其他"),
                        ],
                        max_length=20,
                        verbose_name="交易类型",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "待处理"),
                            ("SUCCESS", "成功"),
                            ("FAILED", "失败"),
                        ],
                        max_length=20,
                        verbose_name="状态",
                    ),
                ),
                (
                    "from_address",
                    models.CharField(max_length=100, verbose_name="发送地址"),
                ),
                (
                    "to_address",
                    models.CharField(max_length=100, verbose_name="接收地址"),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=18, max_digits=30, verbose_name="数量"
                    ),
                ),
                (
                    "nft_token_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="NFT Token ID",
                    ),
                ),
                (
                    "gas_price",
                    models.DecimalField(
                        decimal_places=18, max_digits=30, verbose_name="Gas价格"
                    ),
                ),
                (
                    "gas_used",
                    models.DecimalField(
                        decimal_places=18, max_digits=30, verbose_name="Gas使用量"
                    ),
                ),
                ("block_number", models.IntegerField(verbose_name="区块高度")),
                ("block_timestamp", models.DateTimeField(verbose_name="区块时间")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "nft_collection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wallet.nftcollection",
                        verbose_name="NFT合集",
                    ),
                ),
                (
                    "token",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wallet.token",
                        verbose_name="代币",
                    ),
                ),
                (
                    "wallet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wallet.wallet",
                        verbose_name="钱包",
                    ),
                ),
            ],
            options={
                "verbose_name": "交易记录",
                "verbose_name_plural": "交易记录",
                "ordering": ["-block_timestamp"],
                "unique_together": {("chain", "tx_hash")},
            },
        ),
    ]
