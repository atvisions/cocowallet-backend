# Generated by Django 4.2.18 on 2025-03-21 06:14

from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MnemonicBackup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("device_id", models.CharField(max_length=100, verbose_name="设备ID")),
                ("chain", models.CharField(max_length=20, verbose_name="区块链")),
                ("encrypted_mnemonic", models.TextField(verbose_name="加密助记词")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
            ],
            options={
                "verbose_name": "助记词备份",
                "verbose_name_plural": "助记词备份",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NFTCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chain", models.CharField(max_length=20, verbose_name="区块链")),
                (
                    "contract_address",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="合约地址"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="合集名称")),
                ("symbol", models.CharField(max_length=100, verbose_name="合集符号")),
                (
                    "contract_type",
                    models.CharField(
                        default="ERC721", max_length=20, verbose_name="合约类型"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="描述"),
                ),
                (
                    "logo",
                    models.URLField(blank=True, null=True, verbose_name="Logo URL"),
                ),
                (
                    "banner",
                    models.URLField(blank=True, null=True, verbose_name="Banner URL"),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="是否已验证"),
                ),
                (
                    "is_spam",
                    models.BooleanField(default=False, verbose_name="是否垃圾合集"),
                ),
                (
                    "is_visible",
                    models.BooleanField(default=True, verbose_name="是否显示"),
                ),
                (
                    "floor_price",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="地板价",
                    ),
                ),
                (
                    "floor_price_usd",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="地板价(USD)",
                    ),
                ),
                (
                    "floor_price_currency",
                    models.CharField(
                        default="eth", max_length=10, verbose_name="地板价币种"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "NFT合集",
                "verbose_name_plural": "NFT合集",
                "ordering": ["-floor_price_usd", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentPassword",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="设备ID"
                    ),
                ),
                (
                    "encrypted_password",
                    models.CharField(max_length=255, verbose_name="加密的支付密码"),
                ),
                (
                    "is_biometric_enabled",
                    models.BooleanField(default=False, verbose_name="是否启用生物密码"),
                ),
                (
                    "biometric_verified_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="最后生物密码验证时间"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "支付密码",
                "verbose_name_plural": "支付密码",
            },
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chain", models.CharField(max_length=10, verbose_name="链")),
                ("address", models.CharField(max_length=255, verbose_name="合约地址")),
                ("name", models.CharField(max_length=255, verbose_name="名称")),
                ("symbol", models.CharField(max_length=50, verbose_name="符号")),
                ("decimals", models.IntegerField(default=18, verbose_name="小数位数")),
                (
                    "logo",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Logo"
                    ),
                ),
                (
                    "logo_hash",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Logo哈希"
                    ),
                ),
                (
                    "thumbnail",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="缩略图"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        default="token", max_length=20, verbose_name="类型"
                    ),
                ),
                (
                    "contract_type",
                    models.CharField(
                        default="ERC20", max_length=20, verbose_name="合约类型"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="描述"),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="网站"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=255, null=True, verbose_name="邮箱"
                    ),
                ),
                (
                    "twitter",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Twitter"
                    ),
                ),
                (
                    "telegram",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Telegram"
                    ),
                ),
                (
                    "reddit",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Reddit"
                    ),
                ),
                (
                    "discord",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Discord"
                    ),
                ),
                (
                    "instagram",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Instagram"
                    ),
                ),
                (
                    "github",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="GitHub"
                    ),
                ),
                (
                    "medium",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Medium"
                    ),
                ),
                (
                    "moralis",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Moralis"
                    ),
                ),
                (
                    "coingecko_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="CoinGecko ID",
                    ),
                ),
                (
                    "total_supply",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="总供应量"
                    ),
                ),
                (
                    "total_supply_formatted",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="格式化总供应量",
                    ),
                ),
                (
                    "circulating_supply",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="流通供应量"
                    ),
                ),
                (
                    "market_cap",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="市值"
                    ),
                ),
                (
                    "fully_diluted_valuation",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="完全稀释估值",
                    ),
                ),
                (
                    "categories",
                    models.JSONField(
                        blank=True, default=list, null=True, verbose_name="分类"
                    ),
                ),
                (
                    "security_score",
                    models.IntegerField(blank=True, null=True, verbose_name="安全评分"),
                ),
                (
                    "verified",
                    models.BooleanField(default=False, verbose_name="是否验证"),
                ),
                (
                    "possible_spam",
                    models.BooleanField(
                        default=False, verbose_name="是否可能是垃圾代币"
                    ),
                ),
                (
                    "block_number",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="区块高度"
                    ),
                ),
                ("validated", models.IntegerField(default=0, verbose_name="验证状态")),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="创建时间"
                    ),
                ),
                (
                    "is_native",
                    models.BooleanField(default=False, verbose_name="是否原生代币"),
                ),
                (
                    "is_visible",
                    models.BooleanField(default=True, verbose_name="是否显示"),
                ),
                (
                    "is_recommended",
                    models.BooleanField(default=False, verbose_name="是否推荐"),
                ),
                (
                    "last_balance",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="最后余额"
                    ),
                ),
                (
                    "last_price",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="最后价格"
                    ),
                ),
                (
                    "last_price_change",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="最后24h价格变化",
                    ),
                ),
                (
                    "last_value",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="最后价值"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "代币",
                "verbose_name_plural": "代币",
                "ordering": ["-is_recommended", "-verified", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TokenCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, verbose_name="分类名称")),
                (
                    "code",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="分类代码"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="分类描述"),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="分类图标"
                    ),
                ),
                ("priority", models.IntegerField(default=0, verbose_name="显示优先级")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="是否启用"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "代币分类",
                "verbose_name_plural": "代币分类",
                "ordering": ["priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="TokenIndex",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chain", models.CharField(max_length=10, verbose_name="链")),
                ("address", models.CharField(max_length=255, verbose_name="合约地址")),
                ("name", models.CharField(max_length=255, verbose_name="名称")),
                ("symbol", models.CharField(max_length=50, verbose_name="符号")),
                ("decimals", models.IntegerField(default=18, verbose_name="小数位数")),
                (
                    "is_native",
                    models.BooleanField(default=False, verbose_name="是否原生代币"),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="是否已验证"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "代币索引",
                "verbose_name_plural": "代币索引",
            },
        ),
        migrations.CreateModel(
            name="TokenIndexReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_tokens", models.IntegerField(verbose_name="代币总数")),
                ("grade_a_count", models.IntegerField(verbose_name="A级代币数")),
                ("grade_b_count", models.IntegerField(verbose_name="B级代币数")),
                ("grade_c_count", models.IntegerField(verbose_name="C级代币数")),
                ("new_tokens", models.IntegerField(verbose_name="新增代币数")),
                ("removed_tokens", models.IntegerField(verbose_name="移除代币数")),
                (
                    "report_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="报告时间"),
                ),
                ("details", models.JSONField(default=dict, verbose_name="详细信息")),
            ],
            options={
                "verbose_name": "索引库报告",
                "verbose_name_plural": "索引库报告",
                "ordering": ["-report_date"],
            },
        ),
        migrations.CreateModel(
            name="TokenIndexSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, verbose_name="数据源名称")),
                ("priority", models.IntegerField(verbose_name="优先级")),
                (
                    "last_sync",
                    models.DateTimeField(auto_now=True, verbose_name="最后同步时间"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="是否启用"),
                ),
            ],
            options={
                "verbose_name": "代币数据源",
                "verbose_name_plural": "代币数据源",
                "ordering": ["priority"],
            },
        ),
        migrations.CreateModel(
            name="Wallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("device_id", models.CharField(max_length=100, verbose_name="设备ID")),
                ("name", models.CharField(max_length=100, verbose_name="钱包名称")),
                ("chain", models.CharField(max_length=20, verbose_name="区块链")),
                ("address", models.CharField(max_length=100, verbose_name="地址")),
                (
                    "encrypted_private_key",
                    models.TextField(blank=True, null=True, verbose_name="加密私钥"),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="wallet_avatars/",
                        verbose_name="头像",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="是否激活"),
                ),
                (
                    "is_watch_only",
                    models.BooleanField(default=False, verbose_name="是否观察者钱包"),
                ),
                (
                    "is_imported",
                    models.BooleanField(default=False, verbose_name="是否导入的钱包"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "钱包",
                "verbose_name_plural": "钱包",
                "ordering": ["-created_at"],
                "unique_together": {("device_id", "chain", "address")},
            },
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chain", models.CharField(max_length=20, verbose_name="区块链")),
                ("tx_hash", models.CharField(max_length=100, verbose_name="交易哈希")),
                (
                    "tx_type",
                    models.CharField(
                        choices=[
                            ("TRANSFER", "转账"),
                            ("APPROVE", "授权"),
                            ("SWAP", "兑换"),
                            ("MINT", "铸造"),
                            ("BURN", "销毁"),
                            ("OTHER", "其他"),
                        ],
                        max_length=20,
                        verbose_name="交易类型",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "待处理"),
                            ("SUCCESS", "成功"),
                            ("FAILED", "失败"),
                        ],
                        max_length=20,
                        verbose_name="状态",
                    ),
                ),
                (
                    "from_address",
                    models.CharField(max_length=100, verbose_name="发送地址"),
                ),
                (
                    "to_address",
                    models.CharField(max_length=100, verbose_name="接收地址"),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=18, max_digits=30, verbose_name="数量"
                    ),
                ),
                (
                    "nft_token_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="NFT Token ID",
                    ),
                ),
                (
                    "token_info",
                    models.JSONField(blank=True, null=True, verbose_name="代币信息"),
                ),
                (
                    "gas_price",
                    models.DecimalField(
                        decimal_places=18, max_digits=30, verbose_name="Gas价格"
                    ),
                ),
                (
                    "gas_used",
                    models.DecimalField(
                        decimal_places=18, max_digits=30, verbose_name="Gas使用量"
                    ),
                ),
                ("block_number", models.IntegerField(verbose_name="区块高度")),
                ("block_timestamp", models.DateTimeField(verbose_name="区块时间")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "to_token_address",
                    models.CharField(
                        blank=True,
                        help_text="目标代币地址（用于Swap交易）",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "nft_collection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wallet.nftcollection",
                        verbose_name="NFT合集",
                    ),
                ),
                (
                    "token",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wallet.token",
                        verbose_name="代币",
                    ),
                ),
                (
                    "wallet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wallet.wallet",
                        verbose_name="钱包",
                    ),
                ),
            ],
            options={
                "verbose_name": "交易记录",
                "verbose_name_plural": "交易记录",
                "ordering": ["-block_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="TokenIndexMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "daily_volume",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="24h交易量(USD)",
                    ),
                ),
                (
                    "holder_count",
                    models.IntegerField(default=0, verbose_name="持有人数"),
                ),
                (
                    "liquidity",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="流动性(USD)",
                    ),
                ),
                (
                    "market_cap",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="市值(USD)",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="价格(USD)",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "token",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metrics",
                        to="wallet.tokenindex",
                        verbose_name="代币",
                    ),
                ),
            ],
            options={
                "verbose_name": "代币指标",
                "verbose_name_plural": "代币指标",
            },
        ),
        migrations.CreateModel(
            name="TokenIndexGrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "grade",
                    models.CharField(
                        choices=[
                            ("A", "A级 - 核心代币"),
                            ("B", "B级 - 常规代币"),
                            ("C", "C级 - 观察代币"),
                        ],
                        max_length=1,
                        verbose_name="等级",
                    ),
                ),
                ("score", models.IntegerField(default=0, verbose_name="综合评分")),
                (
                    "last_evaluated",
                    models.DateTimeField(auto_now=True, verbose_name="最后评估时间"),
                ),
                (
                    "evaluation_reason",
                    models.TextField(blank=True, null=True, verbose_name="评估原因"),
                ),
                (
                    "token",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="grade",
                        to="wallet.tokenindex",
                        verbose_name="代币",
                    ),
                ),
            ],
            options={
                "verbose_name": "代币等级",
                "verbose_name_plural": "代币等级",
            },
        ),
        migrations.AddIndex(
            model_name="tokenindex",
            index=models.Index(
                fields=["chain", "address"], name="wallet_toke_chain_fd34fc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tokenindex",
            index=models.Index(fields=["symbol"], name="wallet_toke_symbol_ab941d_idx"),
        ),
        migrations.AddIndex(
            model_name="tokenindex",
            index=models.Index(fields=["name"], name="wallet_toke_name_56a71f_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="tokenindex",
            unique_together={("chain", "address")},
        ),
        migrations.AddField(
            model_name="token",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tokens",
                to="wallet.tokencategory",
                verbose_name="代币分类",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="nftcollection",
            unique_together={("chain", "contract_address")},
        ),
        migrations.AlterUniqueTogether(
            name="mnemonicbackup",
            unique_together={("device_id", "chain")},
        ),
        migrations.AlterUniqueTogether(
            name="transaction",
            unique_together={("chain", "tx_hash", "wallet")},
        ),
        migrations.AddIndex(
            model_name="token",
            index=models.Index(
                fields=["chain", "address"], name="wallet_toke_chain_298ab4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="token",
            unique_together={("chain", "address")},
        ),
    ]
