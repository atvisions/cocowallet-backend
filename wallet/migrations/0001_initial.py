# Generated by Django 4.2.18 on 2025-03-24 14:34

from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MnemonicBackup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(max_length=100, verbose_name="Device ID"),
                ),
                ("chain", models.CharField(max_length=20, verbose_name="Blockchain")),
                (
                    "encrypted_mnemonic",
                    models.TextField(verbose_name="Encrypted Mnemonic"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
            ],
            options={
                "verbose_name": "Mnemonic Backup",
                "verbose_name_plural": "Mnemonic Backups",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NFTCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chain", models.CharField(max_length=20, verbose_name="Blockchain")),
                (
                    "contract_address",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Contract Address",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Collection Name"),
                ),
                (
                    "symbol",
                    models.CharField(max_length=100, verbose_name="Collection Symbol"),
                ),
                (
                    "contract_type",
                    models.CharField(
                        default="ERC721", max_length=20, verbose_name="Contract Type"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "logo",
                    models.URLField(blank=True, null=True, verbose_name="Logo URL"),
                ),
                (
                    "banner",
                    models.URLField(blank=True, null=True, verbose_name="Banner URL"),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="Is Verified"),
                ),
                ("is_spam", models.BooleanField(default=False, verbose_name="Is Spam")),
                (
                    "is_visible",
                    models.BooleanField(default=True, verbose_name="Is Visible"),
                ),
                (
                    "floor_price",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="Floor Price",
                    ),
                ),
                (
                    "floor_price_usd",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="Floor Price (USD)",
                    ),
                ),
                (
                    "floor_price_currency",
                    models.CharField(
                        default="eth",
                        max_length=10,
                        verbose_name="Floor Price Currency",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated Time"),
                ),
            ],
            options={
                "verbose_name": "NFT Collection",
                "verbose_name_plural": "NFT Collections",
                "ordering": ["-floor_price_usd", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentPassword",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Device ID"
                    ),
                ),
                (
                    "encrypted_password",
                    models.CharField(
                        max_length=255, verbose_name="Encrypted Payment Password"
                    ),
                ),
                (
                    "is_biometric_enabled",
                    models.BooleanField(
                        default=False, verbose_name="Is Biometric Enabled"
                    ),
                ),
                (
                    "biometric_verified_at",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Last Biometric Password Verification Time",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated Time"),
                ),
            ],
            options={
                "verbose_name": "Payment Password",
                "verbose_name_plural": "Payment Passwords",
            },
        ),
        migrations.CreateModel(
            name="PointsHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(max_length=100, verbose_name="Device ID"),
                ),
                ("points", models.IntegerField(verbose_name="Points Change")),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("DOWNLOAD_REFERRAL", "Download Recommendation"),
                            ("WALLET_REFERRAL", "Wallet Creation Recommendation"),
                            ("POINTS_USED", "Points Used"),
                            ("ADMIN_ADJUSTMENT", "Admin Adjustment"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                        verbose_name="Action Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "related_device_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Related Device ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
            ],
            options={
                "verbose_name": "Points History",
                "verbose_name_plural": "Points History",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReferralLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(max_length=100, verbose_name="Device ID"),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="Recommendation Code"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                ("clicks", models.IntegerField(default=0, verbose_name="Click Count")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated Time"),
                ),
            ],
            options={
                "verbose_name": "Recommendation Link",
                "verbose_name_plural": "Recommendation Links",
            },
        ),
        migrations.CreateModel(
            name="ReferralRelationship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "referrer_device_id",
                    models.CharField(max_length=100, verbose_name="Referrer Device ID"),
                ),
                (
                    "referred_device_id",
                    models.CharField(max_length=100, verbose_name="Referred Device ID"),
                ),
                (
                    "download_completed",
                    models.BooleanField(
                        default=True, verbose_name="Is Download Completed"
                    ),
                ),
                (
                    "wallet_created",
                    models.BooleanField(
                        default=False, verbose_name="Is Wallet Created/Imported"
                    ),
                ),
                (
                    "download_points_awarded",
                    models.BooleanField(
                        default=False, verbose_name="Is Download Points Awarded"
                    ),
                ),
                (
                    "wallet_points_awarded",
                    models.BooleanField(
                        default=False, verbose_name="Is Wallet Points Awarded"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated Time"),
                ),
            ],
            options={
                "verbose_name": "Recommendation Relationship",
                "verbose_name_plural": "Recommendation Relationships",
            },
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chain", models.CharField(max_length=10, verbose_name="Chain")),
                (
                    "address",
                    models.CharField(max_length=255, verbose_name="Contract Address"),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("symbol", models.CharField(max_length=50, verbose_name="Symbol")),
                (
                    "decimals",
                    models.IntegerField(default=18, verbose_name="Decimal Places"),
                ),
                (
                    "logo",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Logo"
                    ),
                ),
                (
                    "logo_hash",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Logo Hash"
                    ),
                ),
                (
                    "thumbnail",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Thumbnail"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        default="token", max_length=20, verbose_name="Type"
                    ),
                ),
                (
                    "contract_type",
                    models.CharField(
                        default="ERC20", max_length=20, verbose_name="Contract Type"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Website"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=255, null=True, verbose_name="Email"
                    ),
                ),
                (
                    "twitter",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Twitter"
                    ),
                ),
                (
                    "telegram",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Telegram"
                    ),
                ),
                (
                    "reddit",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Reddit"
                    ),
                ),
                (
                    "discord",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Discord"
                    ),
                ),
                (
                    "instagram",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Instagram"
                    ),
                ),
                (
                    "github",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="GitHub"
                    ),
                ),
                (
                    "medium",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Medium"
                    ),
                ),
                (
                    "moralis",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="Moralis"
                    ),
                ),
                (
                    "coingecko_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="CoinGecko ID",
                    ),
                ),
                (
                    "total_supply",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Total Supply",
                    ),
                ),
                (
                    "total_supply_formatted",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Formatted Total Supply",
                    ),
                ),
                (
                    "circulating_supply",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Circulating Supply",
                    ),
                ),
                (
                    "market_cap",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Market Cap"
                    ),
                ),
                (
                    "fully_diluted_valuation",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Fully Diluted Valuation",
                    ),
                ),
                (
                    "categories",
                    models.JSONField(
                        blank=True, default=list, null=True, verbose_name="Categories"
                    ),
                ),
                (
                    "security_score",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Security Score"
                    ),
                ),
                (
                    "verified",
                    models.BooleanField(default=False, verbose_name="Is Verified"),
                ),
                (
                    "possible_spam",
                    models.BooleanField(default=False, verbose_name="Is Possible Spam"),
                ),
                (
                    "block_number",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Block Height",
                    ),
                ),
                (
                    "validated",
                    models.IntegerField(default=0, verbose_name="Validation Status"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Created Time"
                    ),
                ),
                (
                    "is_native",
                    models.BooleanField(default=False, verbose_name="Is Native Token"),
                ),
                (
                    "is_visible",
                    models.BooleanField(default=True, verbose_name="Is Visible"),
                ),
                (
                    "is_recommended",
                    models.BooleanField(default=False, verbose_name="Is Recommended"),
                ),
                (
                    "last_balance",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Last Balance",
                    ),
                ),
                (
                    "last_price",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Last Price"
                    ),
                ),
                (
                    "last_price_change",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Last 24h Price Change",
                    ),
                ),
                (
                    "last_value",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Last Value"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated Time"),
                ),
            ],
            options={
                "verbose_name": "Token",
                "verbose_name_plural": "Tokens",
                "ordering": ["-is_recommended", "-verified", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TokenCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, verbose_name="Category Name")),
                (
                    "code",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="Category Code"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Category Description"
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Category Icon",
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(default=0, verbose_name="Display Priority"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated Time"),
                ),
            ],
            options={
                "verbose_name": "Token Category",
                "verbose_name_plural": "Token Categories",
                "ordering": ["priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="TokenIndex",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chain", models.CharField(max_length=10, verbose_name="Chain")),
                (
                    "address",
                    models.CharField(max_length=255, verbose_name="Contract Address"),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("symbol", models.CharField(max_length=50, verbose_name="Symbol")),
                (
                    "decimals",
                    models.IntegerField(default=18, verbose_name="Decimal Places"),
                ),
                (
                    "is_native",
                    models.BooleanField(default=False, verbose_name="Is Native Token"),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="Is Verified"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated Time"),
                ),
            ],
            options={
                "verbose_name": "Token Index",
                "verbose_name_plural": "Token Indexes",
            },
        ),
        migrations.CreateModel(
            name="TokenIndexReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_tokens", models.IntegerField(verbose_name="Total Tokens")),
                ("grade_a_count", models.IntegerField(verbose_name="A Grade Tokens")),
                ("grade_b_count", models.IntegerField(verbose_name="B Grade Tokens")),
                ("grade_c_count", models.IntegerField(verbose_name="C Grade Tokens")),
                ("new_tokens", models.IntegerField(verbose_name="New Tokens")),
                ("removed_tokens", models.IntegerField(verbose_name="Removed Tokens")),
                (
                    "report_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="Report Time"),
                ),
                ("details", models.JSONField(default=dict, verbose_name="Details")),
            ],
            options={
                "verbose_name": "Index Library Report",
                "verbose_name_plural": "Index Library Reports",
                "ordering": ["-report_date"],
            },
        ),
        migrations.CreateModel(
            name="TokenIndexSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=50, verbose_name="Data Source Name"),
                ),
                ("priority", models.IntegerField(verbose_name="Priority")),
                (
                    "last_sync",
                    models.DateTimeField(auto_now=True, verbose_name="Last Sync Time"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
            ],
            options={
                "verbose_name": "Token Data Source",
                "verbose_name_plural": "Token Data Sources",
                "ordering": ["priority"],
            },
        ),
        migrations.CreateModel(
            name="Wallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(max_length=100, verbose_name="Device ID"),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Wallet Name")),
                ("chain", models.CharField(max_length=20, verbose_name="Blockchain")),
                ("address", models.CharField(max_length=100, verbose_name="Address")),
                (
                    "encrypted_private_key",
                    models.TextField(
                        blank=True, null=True, verbose_name="Encrypted Private Key"
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="wallet_avatars/",
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "is_watch_only",
                    models.BooleanField(
                        default=False, verbose_name="Is Watch-Only Wallet"
                    ),
                ),
                (
                    "is_imported",
                    models.BooleanField(
                        default=False, verbose_name="Is Imported Wallet"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated Time"),
                ),
                ("referral_info", models.JSONField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Wallet",
                "verbose_name_plural": "Wallets",
                "ordering": ["-created_at"],
                "unique_together": {("device_id", "chain", "address")},
            },
        ),
        migrations.CreateModel(
            name="UserPoints",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Device ID"
                    ),
                ),
                (
                    "total_points",
                    models.IntegerField(default=0, verbose_name="Total Points"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated Time"),
                ),
            ],
            options={
                "verbose_name": "User Points",
                "verbose_name_plural": "User Points",
                "indexes": [
                    models.Index(
                        fields=["device_id"], name="wallet_user_device__dfd57c_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chain", models.CharField(max_length=20, verbose_name="Blockchain")),
                (
                    "tx_hash",
                    models.CharField(max_length=100, verbose_name="Transaction Hash"),
                ),
                (
                    "tx_type",
                    models.CharField(
                        choices=[
                            ("TRANSFER", "Transfer"),
                            ("APPROVE", "Approve"),
                            ("SWAP", "Swap"),
                            ("MINT", "Mint"),
                            ("BURN", "Burn"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                        verbose_name="Transaction Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SUCCESS", "Success"),
                            ("FAILED", "Failed"),
                        ],
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "from_address",
                    models.CharField(max_length=100, verbose_name="From Address"),
                ),
                (
                    "to_address",
                    models.CharField(max_length=100, verbose_name="To Address"),
                ),
                ("amount", models.CharField(default="0", max_length=64)),
                (
                    "nft_token_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="NFT Token ID",
                    ),
                ),
                (
                    "token_info",
                    models.JSONField(blank=True, null=True, verbose_name="Token Info"),
                ),
                (
                    "gas_price",
                    models.DecimalField(
                        decimal_places=18, max_digits=30, verbose_name="Gas Price"
                    ),
                ),
                (
                    "gas_used",
                    models.DecimalField(
                        decimal_places=18, max_digits=30, verbose_name="Gas Used"
                    ),
                ),
                ("block_number", models.IntegerField(verbose_name="Block Height")),
                ("block_timestamp", models.DateTimeField(verbose_name="Block Time")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
                (
                    "to_token_address",
                    models.CharField(
                        blank=True,
                        help_text="Target Token Address (for Swap transaction)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "nft_collection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wallet.nftcollection",
                        verbose_name="NFT Collection",
                    ),
                ),
                (
                    "token",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wallet.token",
                        verbose_name="Token",
                    ),
                ),
                (
                    "wallet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wallet.wallet",
                        verbose_name="Wallet",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transaction Record",
                "verbose_name_plural": "Transaction Records",
                "ordering": ["-block_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="TokenIndexMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "daily_volume",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="24h Transaction Volume (USD)",
                    ),
                ),
                (
                    "holder_count",
                    models.IntegerField(default=0, verbose_name="Holder Count"),
                ),
                (
                    "liquidity",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="Liquidity (USD)",
                    ),
                ),
                (
                    "market_cap",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="Market Cap (USD)",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=18,
                        default=Decimal("0"),
                        max_digits=30,
                        verbose_name="Price (USD)",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated Time"),
                ),
                (
                    "token",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metrics",
                        to="wallet.tokenindex",
                        verbose_name="Token",
                    ),
                ),
            ],
            options={
                "verbose_name": "Token Metrics",
                "verbose_name_plural": "Token Metrics",
            },
        ),
        migrations.CreateModel(
            name="TokenIndexGrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "grade",
                    models.CharField(
                        choices=[
                            ("A", "A Grade - Core Token"),
                            ("B", "B Grade - Regular Token"),
                            ("C", "C Grade - Observation Token"),
                        ],
                        max_length=1,
                        verbose_name="Grade",
                    ),
                ),
                ("score", models.IntegerField(default=0, verbose_name="Overall Score")),
                (
                    "last_evaluated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Last Evaluation Time"
                    ),
                ),
                (
                    "evaluation_reason",
                    models.TextField(
                        blank=True, null=True, verbose_name="Evaluation Reason"
                    ),
                ),
                (
                    "token",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="grade",
                        to="wallet.tokenindex",
                        verbose_name="Token",
                    ),
                ),
            ],
            options={
                "verbose_name": "Token Grade",
                "verbose_name_plural": "Token Grades",
            },
        ),
        migrations.AddIndex(
            model_name="tokenindex",
            index=models.Index(
                fields=["chain", "address"], name="wallet_toke_chain_fd34fc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tokenindex",
            index=models.Index(fields=["symbol"], name="wallet_toke_symbol_ab941d_idx"),
        ),
        migrations.AddIndex(
            model_name="tokenindex",
            index=models.Index(fields=["name"], name="wallet_toke_name_56a71f_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="tokenindex",
            unique_together={("chain", "address")},
        ),
        migrations.AddField(
            model_name="token",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tokens",
                to="wallet.tokencategory",
                verbose_name="Token Category",
            ),
        ),
        migrations.AddIndex(
            model_name="referralrelationship",
            index=models.Index(
                fields=["referrer_device_id"], name="wallet_refe_referre_149770_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="referralrelationship",
            index=models.Index(
                fields=["referred_device_id"], name="wallet_refe_referre_3505cd_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="referralrelationship",
            unique_together={("referrer_device_id", "referred_device_id")},
        ),
        migrations.AddIndex(
            model_name="referrallink",
            index=models.Index(
                fields=["device_id"], name="wallet_refe_device__5ea9b3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="referrallink",
            index=models.Index(fields=["code"], name="wallet_refe_code_566f65_idx"),
        ),
        migrations.AddIndex(
            model_name="pointshistory",
            index=models.Index(
                fields=["device_id"], name="wallet_poin_device__6fe442_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="pointshistory",
            index=models.Index(
                fields=["action_type"], name="wallet_poin_action__59a4af_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="pointshistory",
            index=models.Index(
                fields=["created_at"], name="wallet_poin_created_0707cf_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="nftcollection",
            unique_together={("chain", "contract_address")},
        ),
        migrations.AlterUniqueTogether(
            name="mnemonicbackup",
            unique_together={("device_id", "chain")},
        ),
        migrations.AlterUniqueTogether(
            name="transaction",
            unique_together={("chain", "tx_hash", "wallet")},
        ),
        migrations.AddIndex(
            model_name="token",
            index=models.Index(
                fields=["chain", "address"], name="wallet_toke_chain_298ab4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="token",
            unique_together={("chain", "address")},
        ),
    ]
